from config import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from keyboards import *
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold, hlink
import time  # enumerate
from get_offers import get_offers


storage = MemoryStorage()
bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)


class Filters(StatesGroup):

   undeground = State()
   price = State()
   area = State()
   rooms = State()


async def on_startup(_):
   print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!") #–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
  await bot.send_message(chat_id=message.from_user.id,
                         text="–ü—Ä–∏–≤–µ—Ç!üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.üè°\n–î–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π",
                         reply_markup=filters_keyboard)
  await message.delete()


@dp.message_handler(Text(equals='–ú–µ—Ç—Ä–æ'))
async def undeground_filter(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏')
   await Filters.undeground.set()


@dp.message_handler(Text(equals='–¶–µ–Ω–∞'))
async def undeground_filter(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç')
   await Filters.price.set()


@dp.message_handler(Text(equals='–ü–ª–æ—â–∞–¥—å'))
async def undeground_filter(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: 20 40')
   await Filters.area.set()


@dp.message_handler(Text(equals='–ö–æ–º–Ω–∞—Ç—ã'))
async def undeground_filter(message: types.Message):
   await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç. (0 - –°—Ç—É–¥–∏—è)')
   await Filters.rooms.set()


@dp.message_handler(state=Filters.undeground)
async def get_offers_on_underground(message: types.Message, state : FSMContext):
   async with state.proxy() as data:
      data['underground'] = message.text.upper()
      offers = get_offers(data)
      if len(offers) == 0:
         await message.answer('–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏')
      else:
         for index, offer in enumerate(offers):
            card = f'{hlink(offer[0], offer[2])}\n'\
                  f'{hbold("–¶–µ–Ω–∞: ")}{offer[1]}\n'\
                  f'{hbold("–ê–¥—Ä–µ—Å—Å: ")}{offer[4]}\n'\
                  f'{hbold("–ú–µ—Ç—Ä–æ: ")}{offer[5]}\n'\
                  f'{hbold("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ")}{offer[3]}\n'
            await message.answer(card)
            
   await state.finish()


@dp.message_handler(state=Filters.price)
async def get_offers_on_price(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      try:
         data['price'] = int(message.text)
         offers = get_offers(data)
         if len(offers) == 0:
            await message.answer('–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏')
         else:
            for index, offer in enumerate(offers):
               card = f'{hlink(offer[0], offer[2])}\n'\
                  f'{hbold("–¶–µ–Ω–∞: ")}{offer[1]}\n'\
                  f'{hbold("–ê–¥—Ä–µ—Å—Å: ")}{offer[4]}\n'\
                  f'{hbold("–ú–µ—Ç—Ä–æ: ")}{offer[5]}\n'\
                  f'{hbold("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ")}{offer[3]}\n'
               await message.answer(card)
            #data['offers'] = offers
            #data['page'] = 1
            #await state.update_data(offers=offers, page=1)
            #await show_next_offers(message, state, storage)
      except ValueError:
         await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä '–¶–µ–Ω–∞' –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤")
   await state.finish()

'''
async def show_next_offers(message: types.Message, state: FSMContext, storage: MemoryStorage):
   async with state.proxy() as data:
      offers = offers.get('offers', [])
      page = data.get('page', 1)
      start_index = (page - 1) * 5
      end_index = start_index + 5
      current_offers = offers[start_index:end_index]
      for offer in current_offers:
          card = f'{hlink(offer[0], offer[2])}\n'\
              f'{hbold("–¶–µ–Ω–∞: ")}{offer[1]}\n'\
              f'{hbold("–ê–¥—Ä–µ—Å—Å: ")}{offer[4]}\n'\
              f'{hbold("–ú–µ—Ç—Ä–æ: ")}{offer[5]}\n'\
              f'{hbold("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ")}{offer[3]}\n'
          await message.answer(card)
      if end_index < len(offers):
         await message.answer('–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏', reply_markup=result_keyboard)
      else:
         await message.answer('–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏')


@dp.message_handler(Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'))
async def show_more_offers(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      page = data.get('page', 1)
      data['page'] = page + 1
      #await state.update_data(page=page + 1)
      #await state.update_data(offers=data['offers'])
      await show_next_offers(message, state, storage)


@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º'))
async def retrun_to_filters(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      await state.finish()
      await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞", reply_markup=filters_keyboard)
      await message.delete()
'''

@dp.message_handler(state=Filters.area)
async def get_offers_on_area(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      data['area'] = message.text.split()
      offers = get_offers(data)
      if isinstance(offers, str):
         await message.answer(offers)
      elif len(offers) == 0:
         await message.answer('–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏')
      else:
         for index, offer in enumerate(offers):
            card = f'{hlink(offer[0], offer[2])}\n'\
               f'{hbold("–¶–µ–Ω–∞: ")}{offer[1]}\n'\
               f'{hbold("–ê–¥—Ä–µ—Å—Å: ")}{offer[4]}\n'\
               f'{hbold("–ú–µ—Ç—Ä–æ: ")}{offer[5]}\n'\
               f'{hbold("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ")}{offer[3]}\n'
            await message.answer(card)
   await state.finish()


@dp.message_handler(state=Filters.rooms)
async def get_offers_on_rooms(message: types.Message, state: FSMContext):
   async with state.proxy() as data:
      try:
         data['rooms'] = message.text
         offers = get_offers(data)
         if len(offers) == 0:
            await message.answer('–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏')
         for index, offer in enumerate(offers):
            card = f'{hlink(offer[0], offer[2])}\n'\
               f'{hbold("–¶–µ–Ω–∞: ")}{offer[1]}\n'\
               f'{hbold("–ê–¥—Ä–µ—Å—Å: ")}{offer[4]}\n'\
               f'{hbold("–ú–µ—Ç—Ä–æ: ")}{offer[5]}\n'\
               f'{hbold("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ")}{offer[3]}\n'
            await message.answer(card)
      except ValueError:
         await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä '–ö–æ–º–Ω–∞—Ç—ã' –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç. (0 - –°—Ç—É–¥–∏—è)")
   await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True) #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞